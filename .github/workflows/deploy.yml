name: Deploy Financial Bot

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Install SAM CLI
        run: |
          pip install aws-sam-cli
          
      - name: Cache SAM dependencies
        uses: actions/cache@v3
        with:
          path: |
            infra/.aws-sam
          key: sam-${{ runner.os }}-${{ hashFiles('infra/template.yaml') }}
          
      - name: Deploy to ${{ inputs.environment }}
        working-directory: infra
        run: |
          sam delete --stack-name financial-bot-${{ inputs.environment }} --region ${{ secrets.AWS_REGION }} --no-prompts || true
          aws cloudformation wait stack-delete-complete --region ${{ secrets.AWS_REGION }} --stack-name financial-bot-${{ inputs.environment }} || true
          sam build --template template.yaml --build-dir .aws-sam/build
          sam deploy \
            --stack-name financial-bot-${{ inputs.environment }} \
            --template-file .aws-sam/build/template.yaml \
            --resolve-s3 \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides \
              ParameterKey=Environment,ParameterValue=${{ inputs.environment }} \
              ParameterKey=TelegramBotToken,ParameterValue=${{ secrets.BOT_TOKEN_TELEGRAM }} \
              ParameterKey=GoogleApiKey,ParameterValue=${{ secrets.GOOGLE_API_KEY }} \
              ParameterKey=RepoUrl,ParameterValue=https://github.com/dinero-organizer/financial-categorizer-bot.git
        env:
          BOT_TOKEN_TELEGRAM: ${{ secrets.BOT_TOKEN_TELEGRAM }}

      - name: Start/verify service on instance
        run: |
          IID=$(aws cloudformation describe-stack-resources \
            --region ${{ secrets.AWS_REGION }} \
            --stack-name financial-bot-${{ inputs.environment }} \
            --query "StackResources[?LogicalResourceId=='BotInstance'].PhysicalResourceId" \
            --output text)
          echo "Instance: $IID"
          aws ec2 wait instance-status-ok --region ${{ secrets.AWS_REGION }} --instance-ids "$IID"
          MANAGED=$(aws ssm describe-instance-information \
            --region ${{ secrets.AWS_REGION }} \
            --filters Key=InstanceIds,Values="$IID" \
            --query 'length(InstanceInformationList)' --output text)
          echo "SSM managed: $MANAGED"
          if [ "$MANAGED" = "1" ]; then
            CMD_ID=$(aws ssm send-command \
              --region ${{ secrets.AWS_REGION }} \
              --instance-ids "$IID" \
              --document-name "AWS-RunShellScript" \
              --parameters commands='["systemctl status finbot --no-pager || sudo systemctl restart finbot","sleep 3","systemctl status finbot --no-pager"]' \
              --query 'Command.CommandId' --output text) || true
            echo "SSM Command: $CMD_ID"
            if [ -n "$CMD_ID" ] && [ "$CMD_ID" != "None" ]; then
              aws ssm wait command-executed --region ${{ secrets.AWS_REGION }} --command-id "$CMD_ID" --instance-id "$IID" || true
              aws ssm list-command-invocations --region ${{ secrets.AWS_REGION }} --command-id "$CMD_ID" --details || true
            else
              echo "SSM send-command not executed; skipping"
            fi
          else
            echo "Instance not managed by SSM yet; skipping service check"
          fi
          
      - name: Get deployment outputs
        id: get-outputs
        if: success()
        working-directory: infra
        run: |
          WEBHOOK_URL=$(aws cloudformation describe-stacks \
            --stack-name "financial-bot-${{ inputs.environment }}" \
            --query 'Stacks[0].Outputs[?OutputKey==`WebhookUrl`].OutputValue' \
            --output text)
          
          echo "Deploy successful!"
          echo "Webhook URL: $WEBHOOK_URL"
          echo "webhook-url=$WEBHOOK_URL" >> $GITHUB_OUTPUT
          
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request' && success()
        uses: actions/github-script@v7
        with:
          script: |
            const webhookUrl = '${{ steps.get-outputs.outputs.webhook-url }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `Deploy para **${{ inputs.environment }}** conclu√≠do com sucesso!\n\nWebhook URL: \`${webhookUrl}\``
            });
