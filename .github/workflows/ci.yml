name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
      - name: Run tests
        run: |
          python -m pytest -q

  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [ test ]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install SAM CLI
        run: |
          python -m pip install --upgrade pip
          python -m pip install aws-sam-cli
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Clean and delete existing stack (prod)
        run: |
          set -e
          STACK=financial-bot-prod
          REGION=${{ secrets.AWS_REGION }}
          if aws cloudformation describe-stacks --region "$REGION" --stack-name "$STACK" >/dev/null 2>&1; then
            # Empty S3 bucket if present to avoid DELETE_FAILED
            BUCKET=$(aws cloudformation describe-stack-resources \
              --region "$REGION" \
              --stack-name "$STACK" \
              --logical-resource-id UploadsBucket \
              --query "StackResources[0].PhysicalResourceId" \
              --output text || echo "")
            if [ -n "$BUCKET" ] && [ "$BUCKET" != "None" ]; then
              aws s3 rm "s3://$BUCKET" --recursive || true
            fi
            # Terminate EC2 instance if it exists
            IID=$(aws cloudformation describe-stack-resources \
              --region "$REGION" \
              --stack-name "$STACK" \
              --logical-resource-id BotInstance \
              --query "StackResources[0].PhysicalResourceId" \
              --output text || echo "")
            if [ -n "$IID" ] && [ "$IID" != "None" ]; then
              aws ec2 terminate-instances --region "$REGION" --instance-ids "$IID" || true
              aws ec2 wait instance-terminated --region "$REGION" --instance-ids "$IID" || true
            fi
            # Delete stack and wait
            sam delete --stack-name "$STACK" --region "$REGION" --no-prompts || true
            aws cloudformation wait stack-delete-complete --region "$REGION" --stack-name "$STACK" || true
          fi
      - name: SAM build
        working-directory: infra
        run: |
          sam build --template template.yaml --build-dir .aws-sam/build
      - name: SAM deploy (prod)
        working-directory: infra
        run: |
          sam deploy \
            --stack-name financial-bot-prod \
            --resolve-s3 \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --capabilities CAPABILITY_IAM \
            --template-file .aws-sam/build/template.yaml \
            --parameter-overrides \
              ParameterKey=Environment,ParameterValue=prod \
              ParameterKey=TelegramBotToken,ParameterValue=${{ secrets.BOT_TOKEN_TELEGRAM }} \
              ParameterKey=GoogleApiKey,ParameterValue=${{ secrets.GOOGLE_API_KEY }} \
              ParameterKey=RepoUrl,ParameterValue=https://github.com/dinero-organizer/financial-categorizer-bot.git

      - name: Wait for instance and start service
        run: |
          IID=$(aws cloudformation describe-stack-resources \
            --region ${{ secrets.AWS_REGION }} \
            --stack-name financial-bot-prod \
            --query "StackResources[?LogicalResourceId=='BotInstance'].PhysicalResourceId" \
            --output text)
          echo "Instance: $IID"
          aws ec2 wait instance-status-ok --region ${{ secrets.AWS_REGION }} --instance-ids "$IID"
          MANAGED=$(aws ssm describe-instance-information \
            --region ${{ secrets.AWS_REGION }} \
            --filters Key=InstanceIds,Values="$IID" \
            --query 'length(InstanceInformationList)' --output text)
          echo "SSM managed: $MANAGED"
          if [ "$MANAGED" = "1" ]; then
            CMD_ID=$(aws ssm send-command \
              --region ${{ secrets.AWS_REGION }} \
              --instance-ids "$IID" \
              --document-name "AWS-RunShellScript" \
              --parameters commands='["systemctl status finbot --no-pager || sudo systemctl restart finbot","sleep 3","systemctl status finbot --no-pager"]' \
              --query 'Command.CommandId' --output text) || true
            echo "SSM Command: $CMD_ID"
            if [ -n "$CMD_ID" ] && [ "$CMD_ID" != "None" ]; then
              aws ssm wait command-executed --region ${{ secrets.AWS_REGION }} --command-id "$CMD_ID" --instance-id "$IID" || true
              aws ssm list-command-invocations --region ${{ secrets.AWS_REGION }} --command-id "$CMD_ID" --details || true
            else
              echo "SSM send-command not executed; skipping"
            fi
          else
            echo "Instance not managed by SSM yet; skipping service check"
          fi


